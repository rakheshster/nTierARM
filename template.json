{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "tierNames": {
            "type": "string",
            "metadata": {
                "description": "A space separated list of tiers"
            },
            "defaultValue": "web application database"
        },
        "gatewaySubnetRequired": {
            "type": "bool",
            "metadata": {
                "description": "Do you want a gateway subnet?"
            },
            "defaultValue": false
        }
    },
    "variables": {
        // these are my various sites and their properties - I use this to get the code based on selections above
        // I use addressPrefix later to form the subnet
        // subnetSize is the last octet of the subnet (including subnet mask). subnetIncrements is how I increment the 3rd octet for each subnet. 
        // if you change subnetSize be sure to change subnetIncrements as the two are dependent. 
        // I iterate over the array of tiers and make the subnet address by concatenating "addressPrefix.(increment x iternation).size"
        // to take the example of Ireland my subnets would be 10.10.0.0/23 (unused), 10.10.2.0/23 (tier1), 10.10.4.0/23 (tier2), and so on ...
        // note: we have overlapping subnets & address spaces across the environments. which is fine as they are not peering. 
        "siteDefs": {
            // Ireland
            "northeurope": {
                "sitePrefix": "eu1", "addressSpace": "10.10.0.0/16", "addressPrefix": "10.10",
                "subnetSize": "0/23", "subnetIncrements": 2
            },
            // Amsterdam (DR)
            "westeurope": {
                "sitePrefix": "eu2", "addressSpace": "10.11.0.0/16", "addressPrefix": "10.11",
                "subnetSize": "0/23", "subnetIncrements": 2
            },
            // Toronto
            "canadacentral": {
                "sitePrefix": "am1", "addressSpace": "10.20.0.0/16", "addressPrefix": "10.20",
                "subnetSize": "0/23", "subnetIncrements": 2
            },
            // Quebec (DR)
            "canadaeast": {
                "sitePrefix": "am2", "addressSpace": "10.21.0.0/16", "addressPrefix": "10.21",
                "subnetSize": "0/23", "subnetIncrements": 2
            },
            // Hong Kong
            "eastasia": {
                "sitePrefix": "ap1", "addressSpace": "10.30.0.0/16", "addressPrefix": "10.30",
                "subnetSize": "0/23", "subnetIncrements": 2
            },
            // Singapore (DR)
            "southeastasia": {
                "sitePrefix": "ap2", "addressSpace": "10.31.0.0/16", "addressPrefix": "10.31",
                "subnetSize": "0/23", "subnetIncrements": 2
            }
        },
        // setting these variables so I can refer to them easily later rather than use the long form referencing the array
        "azlocation": "[resourceGroup().location]",
        "sitePrefix": "[variables('siteDefs')[variables('azlocation')].sitePrefix]",
        "addressSpace": "[variables('siteDefs')[variables('azlocation')].addressSpace]",
        "addressPrefix": "[variables('siteDefs')[variables('azlocation')].addressPrefix]",
        "subnetSizes": "[variables('siteDefs')[variables('azlocation')].subnetSizes]",
        "subnetIncrements": "[variables('siteDefs')[variables('azlocation')].subnetIncrements]",

        // figuring out the environment suffix based on the resurce group name. I need this for the resources I create. 
        // the resource group (which is pre-created) is of the format <sitePrefix>-rg[u|p|pp|d] so I can extract the last char to get suffix
        "environmentSuffix": "[toLower(last(resourceGroup().name))]",
        "vNetName": "[concat(variables('sitePrefix'), '-vnet', variables('environmentSuffix'))]",

        // put the tier names in an array so I can loop over them later. I do this over 3 lines just to make this more readable. 
        // I use this as the subnet names and also for load balancers, NSGs, etc.
        // I add an extra tier called GatewaySubnet or Unused depending on if it has been asked for
        "inputTiersArray": "[split(parameters('tierNames'), ' ')]",
        "gatewayArray": "[if(parameters('gatewaySubnetRequired'), array('GatewaySubnet'), array('Unused'))]",
        "tiersArray": "[concat(variables('gatewayArray'),variables('inputTiersArray'))]"
    },
    "resources": [
        // === Network Security Groups ===
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            // dont do this for the GatewaySubnet or Unused subnet
            "condition": "[and(not(equals(variables('tiersArray')[copyIndex()], 'GatewaySubnet')), not(equals(variables('tiersArray')[copyIndex()], 'Unused')))]",
            "apiVersion": "2020-05-01",
            // I want the name to be for e.g. <site code>-<tier name>-nsg<env suffix>
            "name": "[concat(variables('sitePrefix'), toLower(variables('tiersArray')[copyIndex()]), '-nsg', variables('environmentSuffix'))]",
            "location": "[variables('azLocation')]",
            "properties": {
                "securityRules": []
            },
            "copy": {
                "name": "nsg-loop",
                "count": "[length(variables('tiersArray'))]"
            }
        },
        // === Virtual Networks ===
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-05-01",
            "name": "[variables('vNetName')]",
            "location": "[variables('azLocation')]",
            "properties": {
                "virtualNetworkPeerings": [],
                "enableDdosProtection": false,
                "enableVmProtection": false,
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressSpace')]"
                    ]
                }
                // subnets are created later on. initially I was doing a copy block here but that failed coz applying an NSG on GatewaySubnet is disallowed
                // and I couldn't put in a condition block within a copy block. so I split out subnet creation for later. 
            }
        },
        // === Subnets ===
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            // dont do this for the GatewaySubnet or Unused subnet
            "condition": "[and(not(equals(variables('tiersArray')[copyIndex()], 'GatewaySubnet')), not(equals(variables('tiersArray')[copyIndex()], 'Unused')))]",
            "apiVersion": "2020-07-01",
            "name": "[concat(variables('vnetName'), '/', variables('tiersArray')[copyIndex('subnet-loop')])]",
            "properties": {
                "addressPrefix": "[concat(variables('addressPrefix'), '.', mul(variables('subnetIncrements'),copyIndex()), '.', variables('subnetSizes'))]",
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('sitePrefix'), toLower(variables('tiersArray')[copyIndex()]), '-nsg', variables('environmentSuffix')))]"
                }
            },
            "dependsOn": [
                // I need the NSGs created, so I make that loop a dependency
                // thanks to https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/define-resource-dependency#depend-on-resources-in-a-loop
                "nsg-loop"
            ],
            "copy": {
                "name": "subnet-loop",
                "count": "[length(variables('tiersArray'))]"
            }
        },
        // === Subnets (contd) ===
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            // special case for the GatewaySubnet
            "condition": "[or(equals(variables('tiersArray')[copyIndex('subnet-loop')].name, 'GatewaySubnet'), equals(variables('tiersArray')[copyIndex()], 'Unused'))]",
            "apiVersion": "2020-07-01",
            "name": "[concat(variables('vnetName'), '/', variables('tiersArray')[copyIndex('subnet-loop')])]",
            "properties": {
                "addressPrefix": "[concat(variables('addressPrefix'), '.', mul(variables('subnetIncrements'),copyIndex()), '.', variables('subnetSizes'))]"
            },
            "copy": {
                "name": "subnet-loop",
                "count": "[length(variables('tiersArray'))]"
            }
        },

        {
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "2019-07-01",
            "name": "[parameters('availabilitySets_EU1_Web_AS_name')]",
            "location": "northeurope",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachines_EU1_Web01U_name'))]"
            ],
            "sku": {
                "name": "Aligned"
            },
            "properties": {
                "platformUpdateDomainCount": 5,
                "platformFaultDomainCount": 3,
                "virtualMachines": [
                    {
                        "id": "[resourceId('Microsoft.Compute/virtualMachines', parameters('virtualMachines_EU1_Web01U_name'))]"
                    }
                ]
            }
        },

        {
            "type": "Microsoft.Network/loadBalancers",
            "apiVersion": "2020-05-01",
            "name": "[parameters('loadBalancers_EU1_Application_LBU_name')]",
            "location": "northeurope",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresses_EU1_Application_LBU_PIP_name'))]"
            ],
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresses_EU1_Application_LBU_PIP_name'))]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "backendAddressPools": [],
                "loadBalancingRules": [],
                "probes": [],
                "inboundNatRules": [],
                "outboundRules": [],
                "inboundNatPools": []
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "apiVersion": "2020-05-01",
            "name": "[parameters('loadBalancers_EU1_Database_LBU_name')]",
            "location": "northeurope",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresses_EU1_Database_LBU_PIP_name'))]"
            ],
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresses_EU1_Database_LBU_PIP_name'))]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "backendAddressPools": [],
                "loadBalancingRules": [],
                "probes": [],
                "inboundNatRules": [],
                "outboundRules": [],
                "inboundNatPools": []
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers/backendAddressPools",
            "apiVersion": "2020-05-01",
            "name": "[concat(parameters('loadBalancers_EU1_Web_LBU_name'), '/Web')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancers_EU1_Web_LBU_name'))]"
            ],
            "properties": {
                "loadBalancerBackendAddresses": [
                    {
                        "name": "EU1-RG01U_eu1-web01u23ipconfig1",
                        "properties": {}
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "2020-05-01",
            "name": "[concat(parameters('virtualNetworks_EU1_VNET01U_name'), '/', parameters('virtualNetworks_EU1_VNET01U_name'), '-EU1-VNET01H')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworks_EU1_VNET01U_name'))]"
            ],
            "properties": {
                "peeringState": "Connected",
                "remoteVirtualNetwork": {
                    "id": "[parameters('virtualNetworks_EU1_VNET01H_externalid')]"
                },
                "allowVirtualNetworkAccess": true,
                "allowForwardedTraffic": true,
                "allowGatewayTransit": false,
                "useRemoteGateways": false,
                "remoteAddressSpace": {
                    "addressPrefixes": [
                        "172.16.0.0/16"
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[parameters('virtualMachines_EU1_Web01U_name')]",
            "location": "northeurope",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySets_EU1_Web_AS_name'))]",
                "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaces_eu1_web01u23_name'))]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySets_EU1_Web_AS_name'))]"
                },
                "hardwareProfile": {
                    "vmSize": "Standard_B2s"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "2019-Datacenter",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Windows",
                        "name": "[concat(parameters('virtualMachines_EU1_Web01U_name'), '_OsDisk_1_c5493e635b0749f4879bb4a85d3f396d')]",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "id": "[resourceId('Microsoft.Compute/disks', concat(parameters('virtualMachines_EU1_Web01U_name'), '_OsDisk_1_c5493e635b0749f4879bb4a85d3f396d'))]"
                        }
                    },
                    "dataDisks": []
                },
                "osProfile": {
                    "computerName": "[parameters('virtualMachines_EU1_Web01U_name')]",
                    "adminUsername": "kraghavani",
                    "windowsConfiguration": {
                        "provisionVMAgent": true,
                        "enableAutomaticUpdates": true
                    },
                    "secrets": [],
                    "allowExtensionOperations": true,
                    "requireGuestProvisionSignal": true
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('networkInterfaces_eu1_web01u23_name'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true
                    }
                },
                "licenseType": "Windows_Server"
            }
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "apiVersion": "2020-05-01",
            "name": "[parameters('loadBalancers_EU1_Web_LBU_name')]",
            "location": "northeurope",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresses_EU1_Web_LBU_PIP_name'))]",
                "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancers_EU1_Web_LBU_name'), 'Web')]"
            ],
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIPAddresses_EU1_Web_LBU_PIP_name'))]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "Web",
                        "properties": {
                            "loadBalancerBackendAddresses": [
                                {
                                    "name": "EU1-RG01U_eu1-web01u23ipconfig1",
                                    "properties": {}
                                }
                            ]
                        }
                    }
                ],
                "loadBalancingRules": [],
                "probes": [],
                "inboundNatRules": [],
                "outboundRules": [
                    {
                        "name": "Web-Outbound",
                        "properties": {
                            "allocatedOutboundPorts": 21328,
                            "protocol": "All",
                            "enableTcpReset": true,
                            "idleTimeoutInMinutes": 4,
                            "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancers_EU1_Web_LBU_name'), 'Web')]"
                            },
                            "frontendIPConfigurations": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancers_EU1_Web_LBU_name')), '/frontendIPConfigurations/LoadBalancerFrontEnd')]"
                                }
                            ]
                        }
                    }
                ],
                "inboundNatPools": []
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2020-05-01",
            "name": "[parameters('networkInterfaces_eu1_web01u23_name')]",
            "location": "northeurope",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworks_EU1_VNET01U_name'), 'Web')]",
                "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancers_EU1_Web_LBU_name'), 'Web')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAddress": "10.1.0.4",
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworks_EU1_VNET01U_name'), 'Web')]"
                            },
                            "primary": true,
                            "privateIPAddressVersion": "IPv4",
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('loadBalancers_EU1_Web_LBU_name'), 'Web')]"
                                }
                            ]
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableAcceleratedNetworking": false,
                "enableIPForwarding": false
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-05-01",
            "name": "[concat(parameters('virtualNetworks_EU1_VNET01U_name'), '/Application')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworks_EU1_VNET01U_name'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_EU1_Application_NSGU_name'))]"
            ],
            "properties": {
                "addressPrefix": "10.2.0.0/16",
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_EU1_Application_NSGU_name'))]"
                },
                "serviceEndpoints": [],
                "delegations": [],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-05-01",
            "name": "[concat(parameters('virtualNetworks_EU1_VNET01U_name'), '/Database')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworks_EU1_VNET01U_name'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_EU1_Database_NSGU_name'))]"
            ],
            "properties": {
                "addressPrefix": "10.3.0.0/16",
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_EU1_Database_NSGU_name'))]"
                },
                "serviceEndpoints": [],
                "delegations": [],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-05-01",
            "name": "[concat(parameters('virtualNetworks_EU1_VNET01U_name'), '/Web')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworks_EU1_VNET01U_name'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_EU1_Web_NSGU_name'))]"
            ],
            "properties": {
                "addressPrefix": "10.1.0.0/16",
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_EU1_Web_NSGU_name'))]"
                },
                "serviceEndpoints": [],
                "delegations": [],
                "privateEndpointNetworkPolicies": "Enabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-05-01",
            "name": "[parameters('virtualNetworks_EU1_VNET01U_name')]",
            "location": "northeurope",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_EU1_Web_NSGU_name'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_EU1_Database_NSGU_name'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_EU1_Application_NSGU_name'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/8"
                    ]
                },
                "subnets": [
                    {
                        "name": "Web",
                        "properties": {
                            "addressPrefix": "10.1.0.0/16",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_EU1_Web_NSGU_name'))]"
                            },
                            "serviceEndpoints": [],
                            "delegations": [],
                            "privateEndpointNetworkPolicies": "Enabled",
                            "privateLinkServiceNetworkPolicies": "Enabled"
                        }
                    },
                    {
                        "name": "Database",
                        "properties": {
                            "addressPrefix": "10.3.0.0/16",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_EU1_Database_NSGU_name'))]"
                            },
                            "serviceEndpoints": [],
                            "delegations": [],
                            "privateEndpointNetworkPolicies": "Enabled",
                            "privateLinkServiceNetworkPolicies": "Enabled"
                        }
                    },
                    {
                        "name": "Application",
                        "properties": {
                            "addressPrefix": "10.2.0.0/16",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroups_EU1_Application_NSGU_name'))]"
                            },
                            "serviceEndpoints": [],
                            "delegations": [],
                            "privateEndpointNetworkPolicies": "Enabled",
                            "privateLinkServiceNetworkPolicies": "Enabled"
                        }
                    }
                ],
                "virtualNetworkPeerings": [
                    {
                        "name": "[concat(parameters('virtualNetworks_EU1_VNET01U_name'), '-EU1-VNET01H')]",
                        "properties": {
                            "peeringState": "Connected",
                            "remoteVirtualNetwork": {
                                "id": "[parameters('virtualNetworks_EU1_VNET01H_externalid')]"
                            },
                            "allowVirtualNetworkAccess": true,
                            "allowForwardedTraffic": true,
                            "allowGatewayTransit": false,
                            "useRemoteGateways": false,
                            "remoteAddressSpace": {
                                "addressPrefixes": [
                                    "172.16.0.0/16"
                                ]
                            }
                        }
                    }
                ],
                "enableDdosProtection": false,
                "enableVmProtection": false
            }
        }
    ]
}