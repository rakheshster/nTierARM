{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "tierNames": {
            "type": "string",
            "metadata": {
                "description": "A space separated list of tiers"
            },
            "defaultValue": "web application database"
        },
        "gatewaySubnetRequired": {
            "type": "bool",
            "metadata": {
                "description": "Do you want a gateway subnet?"
            },
            "defaultValue": false
        }
    },
    "variables": {
        // these are my various sites and their properties - I use this to get the code based on selections above
        // I use addressPrefix later to form the subnet
        // subnetSize is the last octet of the subnet (including subnet mask). subnetIncrements is how I increment the 3rd octet for each subnet. 
        // if you change subnetSize be sure to change subnetIncrements as the two are dependent. 
        // I iterate over the array of tiers and make the subnet address by concatenating "addressPrefix.(increment x iternation).size"
        // to take the example of Ireland my subnets would be 10.10.0.0/23 (unused), 10.10.2.0/23 (tier1), 10.10.4.0/23 (tier2), and so on ...
        // note: we have overlapping subnets & address spaces across the environments. which is fine as they are not peering. 
        "siteDefs": {
            // Ireland
            "northeurope": {
                "sitePrefix": "eu1", "addressSpace": "10.10.0.0/16", "addressPrefix": "10.10",
                "subnetSize": "0/23", "subnetIncrements": 2
            },
            // Amsterdam (DR)
            "westeurope": {
                "sitePrefix": "eu2", "addressSpace": "10.11.0.0/16", "addressPrefix": "10.11",
                "subnetSize": "0/23", "subnetIncrements": 2
            },
            // Toronto
            "canadacentral": {
                "sitePrefix": "am1", "addressSpace": "10.20.0.0/16", "addressPrefix": "10.20",
                "subnetSize": "0/23", "subnetIncrements": 2
            },
            // Quebec (DR)
            "canadaeast": {
                "sitePrefix": "am2", "addressSpace": "10.21.0.0/16", "addressPrefix": "10.21",
                "subnetSize": "0/23", "subnetIncrements": 2
            },
            // Hong Kong
            "eastasia": {
                "sitePrefix": "ap1", "addressSpace": "10.30.0.0/16", "addressPrefix": "10.30",
                "subnetSize": "0/23", "subnetIncrements": 2
            },
            // Singapore (DR)
            "southeastasia": {
                "sitePrefix": "ap2", "addressSpace": "10.31.0.0/16", "addressPrefix": "10.31",
                "subnetSize": "0/23", "subnetIncrements": 2
            }
        },
        // setting these variables so I can refer to them easily later rather than use the long form referencing the array
        "azlocation": "[resourceGroup().location]",
        "sitePrefix": "[variables('siteDefs')[variables('azlocation')].sitePrefix]",
        "addressSpace": "[variables('siteDefs')[variables('azlocation')].addressSpace]",
        "addressPrefix": "[variables('siteDefs')[variables('azlocation')].addressPrefix]",
        "subnetSize": "[variables('siteDefs')[variables('azlocation')].subnetSize]",
        "subnetIncrements": "[variables('siteDefs')[variables('azlocation')].subnetIncrements]",

        // figuring out the environment suffix based on the resurce group name. I need this for the resources I create. 
        // the resource group (which is pre-created) is of the format <sitePrefix>-rg[u|p|pp|d] so I can extract the last char to get suffix
        "environmentSuffix": "[toLower(last(resourceGroup().name))]",
        "vnetName": "[concat(variables('sitePrefix'), '-vnet', variables('environmentSuffix'))]",

        // put the tier names in an array so I can loop over them later. I do this over 3 lines just to make this more readable. 
        // I use this as the subnet names and also for load balancers, NSGs, etc.
        // I add an extra tier called GatewaySubnet or Unused depending on if it has been asked for
        "inputTiersArray": "[split(parameters('tierNames'), ' ')]",
        "gatewayArray": "[if(parameters('gatewaySubnetRequired'), array('GatewaySubnet'), array('Unused'))]",
        "tiersArray": "[concat(variables('gatewayArray'),variables('inputTiersArray'))]"
    },
    "resources": [
        // === Network Security Groups ===
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            // dont do this for the GatewaySubnet or Unused subnet
            "condition": "[and(not(equals(variables('tiersArray')[copyIndex()], 'GatewaySubnet')), not(equals(variables('tiersArray')[copyIndex()], 'Unused')))]",
            "apiVersion": "2020-05-01",
            // the name is <site code>-<tier name>-nsg<env suffix>
            "name": "[concat(variables('sitePrefix'), '-', toLower(variables('tiersArray')[copyIndex()]), '-nsg', variables('environmentSuffix'))]",
            "location": "[variables('azLocation')]",
            "properties": {
                "securityRules": []
            },
            "copy": {
                "name": "nsg-loop",
                "count": "[length(variables('tiersArray'))]"
            }
        },
        // === Virtual Networks ===
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2020-05-01",
            "name": "[variables('vnetName')]",
            "location": "[variables('azLocation')]",
            "properties": {
                "virtualNetworkPeerings": [],
                "enableDdosProtection": false,
                "enableVmProtection": false,
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressSpace')]"
                    ]
                }
                // subnets are created later on. initially I was doing a copy block here but that failed coz applying an NSG on GatewaySubnet is disallowed
                // and I couldn't put in a condition block within a copy block. so I split out subnet creation for later. 
            }
        },
        // === Subnets (except Gateway and Unused)===
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            // dont do this for the GatewaySubnet or Unused subnet
            "condition": "[and(not(equals(variables('tiersArray')[copyIndex()], 'GatewaySubnet')), not(equals(variables('tiersArray')[copyIndex()], 'Unused')))]",
            "apiVersion": "2020-07-01",
            // the name is <vnetName>/<tierName>
            "name": "[concat(variables('vnetName'), '/', variables('tiersArray')[copyIndex()])]",
            "properties": {
                "addressPrefix": "[concat(variables('addressPrefix'), '.', mul(variables('subnetIncrements'),copyIndex()), '.', variables('subnetSize'))]",
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('sitePrefix'), toLower(variables('tiersArray')[copyIndex()]), '-nsg', variables('environmentSuffix')))]"
                }
            },
            "dependsOn": [
                // I need the NSGs created, so I make that loop a dependency
                // thanks to https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/define-resource-dependency#depend-on-resources-in-a-loop
                "nsg-loop"
            ],
            // loop over each of my tiers to create this per tier
            "copy": {
                "name": "subnet-loop",
                "count": "[length(variables('tiersArray'))]"
            }
        },
        // === Subnets (Gateway and Unused) ===
        // this is same as above except it has no NSG
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            // special case for the GatewaySubnet
            "condition": "[or(equals(variables('tiersArray')[copyIndex()], 'GatewaySubnet'), equals(variables('tiersArray')[copyIndex()], 'Unused'))]",
            "apiVersion": "2020-07-01",
            // the name is <vnetName>/<tierName>
            "name": "[concat(variables('vnetName'), '/', variables('tiersArray')[copyIndex()])]",
            "properties": {
                "addressPrefix": "[concat(variables('addressPrefix'), '.', mul(variables('subnetIncrements'),copyIndex()), '.', variables('subnetSize'))]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            // loop over each of my tiers to create this per tier
            "copy": {
                "name": "subnet-loop",
                "count": "[length(variables('tiersArray'))]"
            }
        },
        // === Public IPs for my Load Balancers ===
        {
            "type": "Microsoft.Network/publicIPAddresses",
            // dont do this for the GatewaySubnet or Unused subnet
            "condition": "[and(not(equals(variables('tiersArray')[copyIndex()], 'GatewaySubnet')), not(equals(variables('tiersArray')[copyIndex()], 'Unused')))]",
            "apiVersion": "2020-07-01",
            // the name is <site code>-<tier name>-lbpip<env suffix>
            "name": "[concat(variables('sitePrefix'), '-', toLower(variables('tiersArray')[copyIndex()]), '-lbpip', variables('environmentSuffix'))]",
            "location": "[variables('azlocation')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4,
                "ipTags": []
            },
            // loop over each of my tiers to create this per tier
            "copy": {
                "name": "lbpip-loop",
                "count": "[length(variables('tiersArray'))]"
            }
        },
        // === Load Balancers (except Gateway and Unused)===
        {
            "type": "Microsoft.Network/loadBalancers",
            // dont do this for the GatewaySubnet or Unused subnet
            "condition": "[and(not(equals(variables('tiersArray')[copyIndex()], 'GatewaySubnet')), not(equals(variables('tiersArray')[copyIndex()], 'Unused')))]",
            "apiVersion": "2020-05-01",
            // the name is <site code>-<tier name>-lb<env suffix>
            "name": "[concat(variables('sitePrefix'), '-', toLower(variables('tiersArray')[copyIndex()]), '-lb', variables('environmentSuffix'))]",
            "location": "[variables('azlocation')]",
            "dependsOn": [
                // I need the Public IPs created, so I make that loop a dependency
                "lbpip-loop"
            ],
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('sitePrefix'), '-', toLower(variables('tiersArray')[copyIndex()]), '-lbpip', variables('environmentSuffix')))]"
                            },
                            "privateIPAddressVersion": "IPv4"
                        }
                    }
                ],
                "backendAddressPools": [],
                "loadBalancingRules": [],
                "probes": [],
                "inboundNatRules": [],
                "outboundRules": [],
                "inboundNatPools": []
            },
            // loop over each of my tiers to create this per tier
            "copy": {
                "name": "lb-loop",
                "count": "[length(variables('tiersArray'))]"
            }
        }
    ]
}